{
  "name": "metahub",
  "version": "0.2.0",
  "description": "github metadata cache/mirror",
  "main": "metahub.js",
  "scripts": {
    "test": "mocha tests/"
  },
  "keywords": [
    "github",
    "api",
    "metadata",
    "scrape"
  ],
  "author": {
    "name": "Brian Ford"
  },
  "license": "MIT",
  "dependencies": {
    "q": "~0.9.6",
    "lodash": "~1.3.1",
    "github": "~0.1.10",
    "express": "~3.3.4"
  },
  "devDependencies": {
    "rewire": "~1.1.3",
    "007": "~0.0.2",
    "qequire": "~0.0.2",
    "should": "~1.2.2",
    "mocha": "~1.12.0",
    "sinon": "~1.7.3"
  },
  "readme": "# metahub\n\n[![Build Status](https://travis-ci.org/btford/metahub.png)](https://travis-ci.org/btford/metahub)\n\n\nA per-repo, always-up-to-date cache of Github's meta-data (like issues, PRs, and comments).\nGreat for speeding up requests and avoiding running over GitHub's API limits.\n\n## What is it good for?\nLong-running services that want to frequently calculate/respond to metrics based on Github Issues, PRs, and comments.\nMetahub was created for [Mary Poppins](https://github.com/btford/mary-poppins), a tool for helping to manage issues and PRs on populat Github repos.\n\nFor a more lightweight approach, you might want to look into:\n\n* [`node-github`](https://github.com/ajaxorg/node-github)\n\n## Usage\n\n```\nvar config = {\n  // Github repo to watch\n  // https://github.com/myname/myrepo\n  target: {\n    user: 'myname',\n    repo: 'myrepo'\n  },\n\n  // credentials for user who leaves comments, etc\n  login: {\n    username: 'myrobotname',\n    password: 'supersecretpassword'\n  },\n\n  // port to listen on,\n  // and URL for Github to ping\n  hook: {\n    url: 'http://example.com:1234',\n    port: 1234\n  }\n};\n\nvar meta = require('metahub')(config);\n\nmeta.on('issueReopened', function (data) {\n  console.log('this issue was reopened: ' + data.number);\n});\n\nmeta.start();\n```\n\n## How does it work?\n\nFirst, metahub makes a bajillion requests to Github to scrape all the data.\nThen, it launches an Express instance and uses Github's WebHooks API to stay up-to-date.\n\n\n## API\nUses promises (sorry, not sorry).\n\n### `makeMeta(config)`\n\nMetahub factory;\n\n```\nvar makeMeta = require('metahub');\nvar config = {\n  // etc...\n};\nvar meta = makeMeta(config);\n```\n\n### `Metahub`\n\nUseful if you want to extend `Metahub`:\n\n```\nvar util = require('util');\nvar Metahub = require('metahub').Metahub;\n\nvar MyHub = function MyHub () {\n  Metahub.apply(this, arguments);\n};\n\nutil.inherits(MyHub, Metahub);\n```\n\n-------------------------------------------------------------------------------\n\n### `meta.issues`\n\nThis property contains all of the issue info [scraped from Github](http://developer.github.com/v3/issues/#get-a-single-issue), organized by `number`.\n\n```\nconsole.log(meta.issues[1347].title);\n// -> \"The Issue Title\"\n```\n\n\n### `meta.repo`\n\nThis property contains all of the repo info [scraped from Github](http://developer.github.com/v3/repos/#get):\n\n```\nconsole.log(meta.repo);\n// -> { \"id\": 1296269, \"owner\": { ... }, \"name\": \"Hello-World\", ... }\n```\n\n-------------------------------------------------------------------------------\n\n### `meta.start()`\n\nStarts the Github hook server, which listens to the port specified in the config.\n\n-------------------------------------------------------------------------------\n\n### `meta.getCommits(number)`\n\nReturns the commits for the specified PR.\n\n### `meta.createComment(number, body)`\n\nCreates a comment for the specified issue/PR with the given moarkdown-formatted body.\n\n\n## License\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "metahub@0.2.0",
  "dist": {
    "shasum": "602f50a1e134df71e75758c495d2659c1bedea28"
  },
  "_from": "metahub@~0.2.0",
  "_resolved": "https://registry.npmjs.org/metahub/-/metahub-0.2.0.tgz"
}
