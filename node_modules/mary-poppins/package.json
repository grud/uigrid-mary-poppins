{
  "name": "mary-poppins",
  "version": "0.2.0",
  "description": "Keeps your GitHub PRs and issues tidy",
  "main": "poppins.js",
  "dependencies": {
    "commander": "~1.1.1",
    "express": "~3.2.6",
    "hookshot": "~0.0.2",
    "github": "~0.1.10",
    "lodash": "~1.2.1",
    "q": "~0.9.6",
    "metahub": "~0.2.0",
    "qequire": "*"
  },
  "preferGlobal": true,
  "bin": {
    "mary-poppins": "bin.js"
  },
  "devDependencies": {
    "mocha": "~1.12.0",
    "should": "~1.2.2",
    "rewire": "~1.1.3",
    "expect.js": "~0.2.0",
    "supertest": "~0.8.2",
    "nock": "0.25.0"
  },
  "scripts": {
    "test": "mocha tests/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/btford/mary-poppins.git"
  },
  "keywords": [
    "cli",
    "github"
  ],
  "author": {
    "name": "Brian Ford"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/btford/mary-poppins/issues"
  },
  "readme": "# Mary Poppins\n\n\n![bad photoshop](https://raw.github.com/btford/mary-poppins/master/img/poppins.jpg)\n\n## What's Poppin'?\n\nMary Poppins is an extensible GitHub bot that keeps your PRs and issues tidy.\n\nSee also:\n* [haunt](https://github.com/fat/haunt) - A module for creating github issue bots\n* [metahub](https://github.com/btford/metahub) - github metadata cache/mirror\n\n\n## Install\n\nInstall `mary-poppins` via `npm`:\n\n```shell\nnpm install -g mary-poppins\n```\n\n\n## Config\n\nThe config file is just JavaScript.\nSee [`example-config.js`](https://github.com/btford/mary-poppins/blob/master/example-config.js).\n\nTo create a new config in the current directory from the example, you can run:\n```\nmary-poppins init\n```\n\n### Plugins\n\nBy herself, Mary Poppins don't do anything interesting.\nBy loading plugins you can give her things to do.\n\n\n#### Finding Plugins\n\nSearch for plugins via `npm`:\n\n```shell\nnpm search poppins-\n```\n\nSome existing plugins are:\n\n* [poppins-pr-checklist](https://github.com/btford/poppins-pr-checklist) - respond to pull requests with a checklist\n  - [poppins-check-cla](https://github.com/btford/poppins-check-cla) - check if a user has signed a CLA\n  - [poppins-check-commit](https://github.com/btford/poppins-check-commit) - check if the commits follow conventions\n\n\n#### Installing Plugins\n\nPlugins should be installed locally, in the same directory as the config file.\nPlugins are installed with `npm`:\n\n```\nnpm install poppins-pr-checklist --save\n```\n\nTypically you want to save the plugin to `package.json`.\n\nAfter installing the plugin, you need to load it by calling `poppins.couldYouPlease()` in your config file:\n\n```javascript\n// config.js\nmodule.exports = function (poppins) {\n\n  poppins.config = { /*...*/ };\n\n  poppins.couldYouPlease('pr-checklist');\n};\n```\n\nAlternatively, poppins can load all of the plugins in the `node_modules` directory with `poppins.theUsualPlase()`.\n\n#### Configuring the Plugin\n\nPlugins are configured by adding properties to a `Poppins` object.\nBy convention, plugins add properties to `poppins.plugins.pluginName`, where `pluginName` corresponds to the name of the plugin.\n\n\n## Let's get Poppin'\n\nMary Poppins needs to be hosted somewhere so that Github hooks can send her updates.\nI recommend something like [Google Compute Engine](https://cloud.google.com/products/compute-engine),\n[Linode](https://www.linode.com/), or [Amazon EC2](http://aws.amazon.com/ec2/).\nAny service that allows you to run `node` and gives you a static IP/hostname is fine.\n\nTo run Poppins, need to add the appropriate [Github repository hook](http://developer.github.com/v3/repos/hooks/).\nThe `mary-poppins` CLI can do this for you.\nRun:\n\n```shell\nmary-poppins install config.js\n```\n\nIf you need to make changes to the config, uninstall then re-install.\n\n**Note:** You need to use this command to install the hook. Using the web-based panel for hooks\nwill not set the correct options.\n\nOnce Mary Poppins's GitHub hook is installed, you can have her respond to PRs like this:\n\n```shell\nmary-poppins start config.js\n```\n\n\n-------------------------------------------------------------------------------\n\n## Uninstall\n\nIf you want to stop Mary Poppins, you'll also need to remove the corresponding Github Webhook.\n\nYou can uninstall the web hook by running the following:\n\n```shell\nmary-poppins remove config.js\n```\n\nTo verify that the hook isn't there anymore, you can run:\n\n```shell\nmary-poppins hooks config.js\n```\n\nWhich will log something like this:\n\n```\n#12345678\n  active: true\n  url:    http://example.com:3000/\n```\n\nAlternatively, you can remove the hook by visiting \"https://github.com/**you**/**your-repo**/settings/hooks\" and clicking \"remove.\"\n\n![bad photoshop](https://raw.github.com/btford/mary-poppins/master/img/github-hooks.png)\n\n-------------------------------------------------------------------------------\n\n## Cache\n\nMary Poppins caches Github repo data to reduce the number of Github calls she needs to make.\nThis cache is stored in `.cache` by default.\n`mary-poppins` is pretty good at knowing when she has a dirty cache, but you can remove this directory if you'd like to.\n\n\n-------------------------------------------------------------------------------\n\n## Programatic API\n\nThe programmatic API is useful for authoring plugins.\nIf you don't need to interact with Mary Poppins's plugins, you might be better off using [`metahub`](https://github.com/btford/metahub).\n\n\n### Constructor\n\nUseful for extending Poppins.\nNote that Poppins extends [metahub](https://github.com/btford/metahub) and is an [EventEmitter](http://nodejs.org/api/events.html#events_class_events_eventemitter).\n\n```javascript\nvar util = require('util');\nvar Poppins = require('poppins').Poppins;\n\nvar MrsFeatherbottom = function () {};\nutil.inherits(MrsFeatherbottom, Poppins);\n\nvar nanny = new MrsFeatherbottom({});\n```\n\n### factory\n\n```javascript\nvar config = { /* ... */ };\nvar poppins = require('poppins')(config);\n```\n\n### `poppins.server`\n\nAn [express](http://expressjs.com/) instance that listens for updates from Github's web hook.\n\n### `poppins.config`\n\nCore config options:\n\n```javascript\nconfig = {\n  target: {\n    user: 'myname',\n    repo: 'myrepo'\n  },\n  login: {\n    username: 'myrobotname',\n    password: 'supersecretpassword'\n  },\n  hook: {\n    url: 'http://example.com:1234',\n    port: 1234\n  }\n};\n```\n\nSee [`example-config.js`](https://github.com/btford/mary-poppins/blob/master/example-config.js).\n\n## Events\n\n`Poppins` is an [EventEmitter](http://nodejs.org/api/events.html#events_class_events_eventemitter).\n\n### `pullRequestOpened`\n\n```javascript\npoppins.on('pullRequestOpened', function (data) { /*...*/ }\n```\n\n-------------------------------------------------------------------------------\n\n## Authoring Plugins\n\nPlugins are simply functions that add properties or listeners to a `Poppins` object.\n\nTake a look at [poppins-pr-checklist](https://github.com/btford/poppins-pr-checklist) for an example.\n\n-------------------------------------------------------------------------------\n\n## Developing Mary Poppins\n\nResources:\n\n* https://help.github.com/articles/post-receive-hooks\n* http://requestb.in/\n\n## License\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "mary-poppins@0.2.0",
  "dist": {
    "shasum": "1966fda7b4166e1bfaeead59d04e9f4c40c02044"
  },
  "_from": "mary-poppins@",
  "_resolved": "https://registry.npmjs.org/mary-poppins/-/mary-poppins-0.2.0.tgz"
}
